name: Savoon Bank CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Test and Build Backend
  backend-ci:
    name: Backend CI/CD
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci --omit=dev --audit=false
      
    - name: Run backend linting
      working-directory: ./backend
      run: |
        npm install --save-dev eslint
        npx eslint . --ext .js --ignore-pattern node_modules/ || true
        
    - name: Run backend tests
      working-directory: ./backend
      run: npm test
      env:
        NODE_ENV: test
        
    - name: Run security audit
      working-directory: ./backend
      run: npm audit --audit-level=high || true

        
    - name: Backend build completed
      working-directory: ./backend
      run: |
        echo "Backend build completed"
        
  # Job 2: Test and Build Frontend
  frontend-ci:
    name: Frontend CI/CD
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci --omit=dev --audit=false

    - name: Run frontend linting
      working-directory: ./frontend
      run: |
         # Install ESLint if not present and run linting
         if ! npm run lint 2>/dev/null; then
          echo "Lint script not found or failed, installing ESLint..."
          npm install --save-dev eslint
         npx eslint src --ext .js,.jsx --report-unused-disable-directives --max-warnings 0 || true
         fi
        
    - name: Run frontend tests
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false --passWithNoTests
      env:
        CI: true
        
    - name: Build frontend for production
      working-directory: ./frontend
      run: npm run build
      
    - name: Run security audit
      working-directory: ./frontend
      run: npm audit --audit-level=high || true
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build-${{ matrix.node-version }}
        path: frontend/build/
        retention-days: 7

 
  # Job 3: Security Scanning
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: [backend-ci, frontend-ci]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: npm
